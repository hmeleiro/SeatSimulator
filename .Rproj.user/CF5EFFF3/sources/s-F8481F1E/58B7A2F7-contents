library(elecciones)
library(tidyverse)
library(SciencesPo)

seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/DHONT/26J_escaños.xlsx")
provincias <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/votoprovincias26J.xlsx")
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/ponderaciones encuestas.xlsx")


provincias$UP <- provincias$`PODEMOS-IU-EQUO.Votos` + 
  provincias$ECP.Votos + 
  provincias$`PODEMOS-COMPROMÍS-EUPV.Votos` + 
  provincias$`PODEMOS-EN.MAREA-ANOVA-EU.Votos`

provincias <- provincias[, -c(13,15,16,19)]


provincias <- provincias %>% gather(key = "siglas", value = "votos", 11:20)

provincias$siglas <- str_remove_all(provincias$siglas, ".Votos")

provs <- unique(provincias$Código.de.Provincia)

provincias$sobrevalido <- (provincias$votos / provincias$Votos.válidos)


parties <- unique(provincias$siglas)
parties <- parties[parties != "VOX"]

provincias$intra <- NA
provincias$votos2019 <- NA

for (p in parties) {
  
  provincias$intra[provincias$siglas == p] <- provincias$votos[provincias$siglas == p] / sum(provincias$votos[provincias$siglas == p])
  
  promedio <- pond$promedio.encuestas[pond$partido == p] / 100
  vv <- sum(provincias$Votos.válidos[pond$partido == p])
  
  provincias$votos2019[provincias$siglas == p] <- provincias$intra[provincias$siglas == p] * (promedio * vv)
  
}


abstencion.intra <- unique((provincias$Total.censo.electoral - provincias$Total.votantes) / sum((unique(provincias$Total.censo.electoral) - unique(provincias$Total.votantes))))
p <- "VOX"
provincias$intra[provincias$siglas == p] <- provincias$intra[provincias$siglas == "PP"] * 0.6725 + 
  provincias$intra[provincias$siglas == "C's"] * 0.2525 + 
  provincias$intra[provincias$siglas == "PSOE"] * 0.03 + 
  provincias$intra[provincias$siglas == "UP"] * 0.045 +
  abstencion.intra * 0.145

promedio <- pond$promedio.encuestas[pond$partido == p] / 100
vv <- sum(provincias$Votos.válidos[pond$partido == p])
provincias$votos2019[provincias$siglas == p] <- provincias$intra[provincias$siglas == p] * (promedio * vv)



#provincias$sobrevalido2019[provincias$siglas %in% c("EAJ-PNV", "EH.Bildu") & provincias$Nombre.de.Comunidad != "País Vasco"] <- 0
#provincias$sobrevalido2019[provincias$siglas %in% c("CDC", "ERC-CATSÍ") & provincias$Nombre.de.Comunidad != "Cataluña"] <- 0
#provincias$sobrevalido2019[provincias$siglas == "CCa-PNC" & provincias$Nombre.de.Comunidad != "Canarias"] <- 0

provincias$votos2019 <- round(provincias$votos2019, 0)

# Resumen pronostico nacional
provincias %>% group_by(siglas) %>% 
  summarise(votos2019 = sum(votos2019), votos2016 = sum(votos)) %>% 
  arrange(-votos2019) %>% 
  mutate(diff = votos2019 - votos2016)

data_tot <- NA

for (p in provs) {
  parties <- provincias$siglas[provincias$Código.de.Provincia == p]
  votos <- provincias$votos2019[provincias$Código.de.Provincia == p]
  escaños <- seats$seats[seats$code == p]
  prov <- seats$prov[seats$code == p]
  
  data <- dHondt(parties = parties, votes = votos, seats = escaños)
  data$provincia <- prov
  
  
  print(data)
  
  data_tot <- rbind(data_tot, data)
}

data_tot <- data_tot[-1,]


results <- as_tibble(data_tot[, c(1,2,4)])

provs <- provincias[, c(1,2,3)]
provs <- provs[!duplicated(provs$Código.de.Provincia),]

results <- merge(results, provs, by.x = "provincia", by.y = "Nombre.de.Provincia")

ccaa <- results %>% group_by(Nombre.de.Comunidad, Party) %>% summarise(seats = sum(Seats))



ccaa_results <- spread(ccaa, "Party", "seats")
prov_results <- spread(results, key = "Party", value = "Seats")
nacional_results <- data_tot %>% group_by(Party) %>% summarise(seats = sum(Seats)) %>% arrange(-seats)
nacional_results_votos <- provincias %>% group_by(siglas) %>% summarise(votos2019 = sum(votos2019), votos2016 = sum(votos)) %>% arrange(-votos2019) %>% mutate(diff = votos2019 - votos2016)

nacional_results_votos
DT::datatable(data = nacional_results, options = list(sDom  = '<"top">rt<"bottom">'), 
              rownames = FALSE, style = "bootstrap", 
              fillContainer = FALSE, height = 400, width = 400)
ccaa_results
prov_results

