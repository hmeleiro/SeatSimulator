parties <- unique(provincias$siglas)
parties <- parties[parties != "VOX"]
provincias$swingfactor <- NA
for ( p in parties) {
provincias$swingfactor[provincias$siglas == p] <- provincias$sobrevalido[provincias$siglas == p] / pond$resultados26J[pond$partido == p]
}
provincias$swingfactor[provincias$siglas == "VOX"] <- provincias$swingfactor[provincias$siglas == "PP"] * 0.6 +
provincias$swingfactor[provincias$siglas == "C's"] * 0.18 +
provincias$swingfactor[provincias$siglas == "UP"] * 0.04 +
provincias$swingfactor[provincias$siglas == "PSOE"] * 0.03 +
provincias$swingfactor_abs[!duplicated(provincias$Código.de.Provincia)] * 0.15
readr::write_csv(provincias, "~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv")
pond
2.63 * 6.300758
library(elecciones)
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
# Calculo el número de votos en función de los votos válidos de 2016
provincias$votos2019 <- NA
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
provincias$sobrevalido2019 <- NA
p <- "PP"
provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
View(provincias)
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
View(provincias)
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
provs
for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$votos2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
provs
p <- provs[40]
p
#for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$votos2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
data
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
## BUCLE 2: UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
data_tot <- data_tot[-1,] # Le quitamos la primera fila al data frame acumulado porque al crear el objeto vacía hay una linea con NAs
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
## BUCLE 2: UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
results <- results[-1,] # Le quitamos la primera fila al data frame acumulado porque al crear el objeto vacía hay una linea con NAs
View(results)
as_tibble(data_tot[, c(1,2,4)])
results
provs <- provincias[, c(1,2,3)]
provs <- provs[!duplicated(provs$Código.de.Provincia),]
results <- merge(results, provs, by.x = "provincia", by.y = "Nombre.de.Provincia")
ccaa <- results %>% group_by(Nombre.de.Comunidad, Party) %>% summarise(seats = sum(Seats))
ccaa_results <- spread(ccaa, "Party", "seats") # A nivel de CCA (escaños)
prov_results <- spread(results, key = "Party", value = "Seats") # A nivel de provincia (escaños)
nacional_results <- data_tot %>% group_by(Party) %>% summarise(seats = sum(Seats)) %>% arrange(-seats) # A nivel nacional (escaños)
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
## BUCLE 2: UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
results <- results[-1,] # Le quitamos la primera fila al data frame acumulado porque al crear el objeto vacía hay una linea con NAs
# AGREGACION DE RESULTADOS
#results <- as_tibble(data_tot[, c(1,2,4)])
provs <- provincias[, c(1,2,3)]
provs <- provs[!duplicated(provs$Código.de.Provincia),]
results <- merge(results, provs, by.x = "provincia", by.y = "Nombre.de.Provincia")
ccaa <- results %>% group_by(Nombre.de.Comunidad, Party) %>% summarise(seats = sum(Seats))
ccaa_results <- spread(ccaa, "Party", "seats") # A nivel de CCA (escaños)
prov_results <- spread(results, key = "Party", value = "Seats") # A nivel de provincia (escaños)
results
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
## BUCLE 2: UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- tibble(NA) # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
results <- results[-1,] # Le quitamos la primera fila al data frame acumulado porque al crear el objeto vacía hay una linea con NAs
# AGREGACION DE RESULTADOS
#results <- as_tibble(data_tot[, c(1,2,4)])
provs <- provincias[, c(1,2,3)]
provs <- provs[!duplicated(provs$Código.de.Provincia),]
results <- merge(results, provs, by.x = "provincia", by.y = "Nombre.de.Provincia")
ccaa <- results %>% group_by(Nombre.de.Comunidad, Party) %>% summarise(seats = sum(Seats))
ccaa_results <- spread(ccaa, "Party", "seats") # A nivel de CCA (escaños)
prov_results <- spread(results, key = "Party", value = "Seats") # A nivel de provincia (escaños)
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
## BUCLE 2: UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
results <- results[-1,] # Le quitamos la primera fila al data frame acumulado porque al crear el objeto vacía hay una linea con NAs
# AGREGACION DE RESULTADOS
#results <- as_tibble(data_tot[, c(1,2,4)])
provs <- provincias[, c(1,2,3)]
provs <- provs[!duplicated(provs$Código.de.Provincia),]
results <- merge(results, provs, by.x = "provincia", by.y = "Nombre.de.Provincia")
ccaa <- results %>% group_by(Nombre.de.Comunidad, Party) %>% summarise(seats = sum(Seats))
ccaa_results <- spread(ccaa, "Party", "seats") # A nivel de CCA (escaños)
prov_results <- spread(results, key = "Party", value = "Seats") # A nivel de provincia (escaños)
head(results)
results %>% group_by(Party) %>% summarise(seats = sum(Seats)) %>% arrange(-seats) # A nivel nacional (escaños)
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
## BUCLE 2: UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
for (p in provs) {
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
results <- results[-1,] # Le quitamos la primera fila al data frame acumulado porque al crear el objeto vacía hay una linea con NAs
# AGREGACION DE RESULTADOS
#results <- as_tibble(data_tot[, c(1,2,4)])
provs <- provincias[, c(1,2,3)]
provs <- provs[!duplicated(provs$Código.de.Provincia),]
results <- merge(results, provs, by.x = "provincia", by.y = "Nombre.de.Provincia")
ccaa <- results %>% group_by(Nombre.de.Comunidad, Party) %>% summarise(seats = sum(Seats))
ccaa_results <- spread(ccaa, "Party", "seats") # A nivel de CCA (escaños)
prov_results <- spread(results, key = "Party", value = "Seats") # A nivel de provincia (escaños)
nacional_results <- results %>% group_by(Party) %>% summarise(seats = sum(Seats)) %>% arrange(-seats) # A nivel nacional (escaños)
# Imprimo los resultados
nacional_results
ccaa_results
prov_results
# Imprimo los resultados
nacional_results
# Imprimo los resultados
nacional_results
provs
results
nacional_results
prov_results
head(prov_results)
shiny::runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
rlang::last_error()
nacional_results
datatable(data = out, options = list(sDom  = '<"top">rt<"bottom">'),
rownames = FALSE, style = "bootstrap",
fillContainer = F, height = 1000, width = 200,
colnames = c("Partido", "Escaños")) %>% formatStyle(names(out)[2],
background = styleColorBar(range(out[, 2]), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
datatable(data = nacional_results, options = list(sDom  = '<"top">rt<"bottom">'),
rownames = FALSE, style = "bootstrap",
fillContainer = F, height = 1000, width = 200,
colnames = c("Partido", "Escaños")) %>% formatStyle(names(out)[2],
background = styleColorBar(range(out[, 2]), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
datatable(data = nacional_results, options = list(sDom  = '<"top">rt<"bottom">'),
rownames = FALSE, style = "bootstrap",
fillContainer = F, height = 1000, width = 200,
colnames = c("Partido", "Escaños")) %>% formatStyle(names(nacional_results)[2],
background = styleColorBar(range(nacional_results[, 2]), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
View(provincias)
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
?plotOutput
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
library(tidyverse)
library(electoral)
# Importo los datos
seats <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/26J_seats.xlsx")  # Reparto de escaños por provincias
provincias <- readr::read_csv("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/data/votoprovincias26J_conswings.csv") # Resultados 26J
pond <- readxl::read_xlsx("~/Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/data/ponderaciones encuestas.xlsx") # Tabla con el promedio de las encuestas y los resultados agregados a nivel nacional
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * pond$promedio.encuestas[pond$partido == p]
}
## BUCLE 2: UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
p <- 2
provincias$sobrevalido2019[provincias$Código.de.Provincia == p]
provincias$siglas[provincias$Código.de.Provincia == p]
seats$seats[seats$code == p]
parties <- provincias$siglas[provincias$Código.de.Provincia == p] # Crea un objeto con los partidos en la provincia p
votos <- provincias$sobrevalido2019[provincias$Código.de.Provincia == p] # Crea un objeto con los votos a los partidos de la provincia p
escaños <- seats$seats[seats$code == p] # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- seats$prov[seats$code == p] # Crea un objeto con el nombre de la provincia p
seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
media.encuestas
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
pond
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
shiny::runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
runApp('Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp')
library(tidyverse)
library(electoral)
provincias <- read_csv("data/data.csv")
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * unique(provincias$promedio.encuestas[provincias$siglas == p]) # Esta ultima pieza es la que debería variar en funcion del input del usuario
}
## UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
setwd("Google Drive/DATOS/R/SIMULACION ELECCIONES/shinyapp/")
library(tidyverse)
library(electoral)
provincias <- read_csv("data/data.csv")
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * unique(provincias$promedio.encuestas[provincias$siglas == p]) # Esta ultima pieza es la que debería variar en funcion del input del usuario
}
## UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
p <- provs[4]
p
x <- provincias[provincias$Código.de.Provincia == p,]
parties <- x$siglas # Crea un objeto con los partidos en la provincia p
votos <- x$sobrevalido2019 # Crea un objeto con los votos a los partidos de la provincia p
escaños <- unique(x$seats) # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- unique(x$Nombre.de.Provincia) # Crea un objeto con el nombre de la provincia p
votos
if (votos < 13) {
print(votos)
}
votos[votos < 13]
votos[votos < 13] <- 2
votos
library(tidyverse)
library(electoral)
provincias <- read_csv("data/data.csv")
# Creo un array con los ids de los partidos
parties <- unique(provincias$siglas)
provincias$sobrevalido2019 <- NA
for (p in parties) {
provincias$sobrevalido2019[provincias$siglas == p] <- provincias$swingfactor[provincias$siglas == p] * unique(provincias$promedio.encuestas[provincias$siglas == p]) # Esta ultima pieza es la que debería variar en funcion del input del usuario
}
## UNA VEZ QUE TENEMOS EL NÚMERO DE VOTOS POR PROVINCIAS DE CADA PARTIDO ITERAMOS POR CADA PROVINCIA PARA HACER EL REPARTO DE ESCAÑOS
results <- NA # Creo in data frame vacío en el que voy a ir acumulando los resultados de cada provincia
provs <- unique(provincias$Código.de.Provincia) # Creo un array con los códigos de las provincias para que itere por ellos el bucle
for (p in provs) {
x <- provincias[provincias$Código.de.Provincia == p,]
parties <- x$siglas # Crea un objeto con los partidos en la provincia p
votos <- x$sobrevalido2019 # Crea un objeto con los votos a los partidos de la provincia p
escaños <- unique(x$seats) # Crea un objeto con el número de escaños a repartir en la provincia p
prov <- unique(x$Nombre.de.Provincia) # Crea un objeto con el nombre de la provincia p
votos[votos < 3] <- 0
d <- seats_ha(parties = parties,
votes = votos,
n_seats = escaños,
method = "dhondt")
data <- tibble(cod.prov = p,
provincia = prov,
Party = names(d),
Seats = as.numeric(d))
# Unimos el resultado con el data frame vacío que hemos creado al principio, pero la segunda
# y sucesivas veces que itere el bucle ya no estará vacío, sino que irá acumulando cada una de las provincias
results <- rbind(results, data)
}
results <- results[-1,] # Le quitamos la primera fila al data frame acumulado porque al crear el objeto vacía hay una linea con NAs
# AGREGACION DE RESULTADOS
provs <- provincias[, c(2,3,4)]
provs <- provs[!duplicated(provs$Código.de.Provincia),]
results <- merge(results, provs, by.x = "provincia", by.y = "Nombre.de.Provincia")
ccaa <- results %>% group_by(Nombre.de.Comunidad, Party) %>% summarise(seats = sum(Seats))
ccaa_results <- spread(ccaa, "Party", "seats") # A nivel de CCA (escaños)
prov_results <- spread(results, key = "Party", value = "Seats") # A nivel de provincia (escaños)
nacional_results <- results %>% group_by(Party) %>% summarise(seats = sum(Seats)) %>% arrange(-seats) # A nivel nacional (escaños)
# Imprimo los resultados
nacional_results
ccaa_results
prov_results
# Imprimo los resultados
nacional_results
shiny::runApp()
